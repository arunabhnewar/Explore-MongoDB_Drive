#MongoDb Operators
#Query and Projection Operators

#Logical operators
$and = { $and: [ { <expression1> }, { <expression2> } , ... , { <expressionN> } ] }
db.collection.find( { $and: [ { price: { $ne: 1.99 } }, { price: { $exists: true } } ] } )

$or = { $or: [ { <expression1> }, { <expression2> }, ... , { <expressionN> } ] }
db.collection.find( { $or: [ { quantity: { $lt: 20 } }, { price: 10 } ] } )

$not = { $not: [ { <expression1> }, { <expression2} ] }
db.collection.find({age: {$not: {$gt: 2}}})

$nor = { $nor: [ { <expression1> }, { <expression2> }, ...  { <expressionN> } ] }
db.collection.find({$nor: [{name: ""}, {age: {$gt: ""}}]})



#Array Query Operators
$all = { <field>: { $all: [ <value1> , <value2> ... ] } }
db.collection.find( { tags: { $all: [ [ "ssl", "security" ] ] } } )

$size = db.collection.find( { field: { $size: 2 } } );

$elemMatch = { <field>: { $elemMatch: { <query1>, <query2>, ... } } }
db.collection.find({field: { $elemMatch: { $gte: value, $lte: value}}})
db.collection.find({field: { $elemMatch: {field1: value1, field2: { $gte: value, $lte: value}}}})


#Comparison Query Operators
$eq = { <field>: { $eq: <value> } }
db.collection.find( { <field>: { $eq: 20 } } )

$gt = { field: { $gt: value } }
db.collection.find( { <field>: { $gt: value }})

$gte = { field: { $gte: value }}
db.collection.find( { <field>: { $gte: value }})

$lt = { field: { $lt: value }}
db.collection.find({ <field>: { $lt: value }})

$lte = { field: { $lte: value }}
db.collection.find({ <field>: { $lte: value }})

$in = { field: { $in: [<value1>, <value2>, ... <valueN> ] } }
db.collection.find( { <field>: { $in: [ <value1>, <value2> ] } } )
db.inventory.updateMany({ <field>: { $in: [ <value1>, <value2> ] } }, { $set: { <field2>: boolean } })

$ne = { field: { $ne: value } }
db.collection.find( { field: { $ne: value} } )



#Element Query Operators
$exists = { field: { $exists: <boolean> } }
db.collection.find({quantity: { $exists: true, $in: [5, 350] }})
db.collection.find({quantity: { $exists: false }})

$type = { field: { $type: <BSON type> } }
db.collection.find({ age: { $type: "int" } })


#Here are some commonly used data types and their corresponding values for the $type operator
1 or "double": Double (64-bit floating-point number)

2 or "string": String

3 or "object": Object (e.g., embedded document)

4 or "array": Array

8 or "boolean": Boolean

9 or "date": Date

16 or "int": 32-bit integer

18 or "long": 64-bit integer

19 or "decimal": Decimal128

26 or "javascript": JavaScript code

27 or "symbol": Symbol

32 or "timestamp": Timestamp

64 or "minkey": MinKey

127 or "maxkey": MaxKey



#Evaluation Query Operators
$regex = 
{ <field>: { $regex: /pattern/, $options: '<options>' } }
{ <field>: { $regex: 'pattern', $options: '<options>' } }
{ <field>: { $regex: /pattern/<options> } }
db.collection.find({ name: { $regex: /(?i)a(?-i)cme/} })


=====================XXXX================================

#Update Operators

#Field Update Operators
$set = { $set: { <field1>: <value1>, ... } }
db.collection.updateOne({ _id: ObjectId("id") }, { $set:  {field1: value1, field2: value2}})
db.collection.updateMany({}, { $set: {field1: value1, field2: value2} }, {multi: true})

$unset = { $unset: { <field1>: "", ... } }
db.collection.updateOne({ _id: ObjectId("id") }, {$unset: {field1: "", field2: ""}})
db.collection.updateMany({}, {$unset: {field1: "", field2: ""}})

$rename = {$rename: { <field1>: <newName1>, <field2>: <newName2>, ... } }
db.collection.updateOne({}, {$rename: {field1: newName1, field2: newName2}})
db.collection.updateOne({_id: ObjectId("id")}, {$rename: {field1: newName1, field2: newName2}})
db.collection.updateMany({}, {$rename: {field1: newName1, field2: newName2}})

$inc = { $inc: { <field1>: <amount1>, <field2>: <amount2>, ... } }
db.collection.updateOne({_id: ObjectId("id")}, {$inc: {<field1>: <amount1>, <field2>: <amount2>}})
db.collection.updateMany({}, {$inc: {<field1>: <amount1>, <field2>: <amount2>}})


$mul = { $mul: { <field1>: <number1>, ... } }
db.collection.updateOne({_id: ObjectId("id")}, {$mul: {<field1>: <multiplyNumber>}})
db.collection.updateMany({}, {$mul: {<field1>: <multiplyNumber>}})

$currentDate = { $currentDate: { <field1>: <booloan>, ... } }
db.collection.updateOne({_id: ObjectId("id")}, {$currentDate: {<field1>: boolean}})

$min = { $min: { <field1>: <value1>, ... } }
db.collection.updateOne({_id: ObjectId("id")}, {$min: {<field1>: <value1>}})

$max = { $max: { <field1>: <value1>, ... } }
db.collection.updateOne({_id: ObjectId("id")}, {$max: {<field1>: <value1>}})



#Array Update Operators
$push = { $push: { <field1>: <value1>, ... } }
db.collection.updateOne({_id: ObjectId("id")}, {$push: {<field1>: <value1>}})
db.collection.updateMany({}, {$push: {<field1>: <value1>}})

$pop = { $pop: { <field>: < -1 | 1>, ... } }
db.collection.updateOne({_id: ObjectId("id")}, {$pop: {<field>:  -1 }})
db.collection.updateOne({_id: ObjectId("id")}, {$pop: {<field>:  1 }})

$pull = { $pull: { <field1>: <value|condition>, <field2>: <value|condition>, ... } }
db.collection.updateMany({}, {$pull: {<field1>: {}}})

$addToSet = { $addToSet: { <field1>: <value1>, ... } }
db.collection.updateMany({}, {$addToSet: {<field1>: value1}})
db.collection.updateOne({_id: ObjectId("id")}, {$addToSet: {<field1>: [value1, value2]}})

$each = { $addToSet: { <field>: { $each: [ <value1>, <value2> ... ] } } }
{ $push: { <field>: { $each: [ <value1>, <value2> ... ] } } }
db.collection.updateOne({_id: ObjectId("id")}, {$push: {<field1>: {$each: [ <value1>, <value2> ...]}}})
db.collection.updateMany({}, {$addToSet: {<field>: {$each: [ <value1>, <value2> ... ]}}})

$slice = { $push: {<field>: {$each: [ <value1>, <value2>, ... ],$slice: <num>}}}
db.collection.updateOne({_id: ObjectId("id")}, {$push: {<field1>: {$each: [ <value1>, <value2>, ...], $slice: < -num>}}})
db.collection.updateOne({_id: ObjectId("id")}, {$push: {<field1>: {$each: [ <value1>, <value2>, ...], $slice: < num>}}})

$sort = {$push: {<field>: {$each: [ <value1>, <value2>, ... ],$sort: <sort specification>}}}
db.collection.updateOne({_id: ObjectId("id")}, {$push: {<field1>: {$each: [], $sort: -1}}})
db.collection.updateOne({_id: ObjectId("id")}, {$push: {<field>: {$each: [{<field1>: <value1>}, {<field2>: <value2> }, ...], $sort: {field1: 1}}}})
